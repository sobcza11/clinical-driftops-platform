# ======================================================================
# File: clinical-driftops-platform/.github/workflows/driftops-ci.yml
# Purpose: DriftOps Phase VI CI workflow (prep → drift → shap → fairness → gate → dashboard → artifacts → (optional) pages)
# ======================================================================

name: DriftOps CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Upgrade pip & install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # MLflow backend (file-based for CI lineage)
      - name: Set MLflow backend (file-based)
        run: echo "MLFLOW_TRACKING_URI=file://$GITHUB_WORKSPACE/mlruns" >> $GITHUB_ENV

      - name: Ensure reports dir
        run: mkdir -p reports

      # Phase III – Data Preparation
      - name: Data prep (baseline/current)
        run: |
          python src/data_prep.py --scaler standard --outliers zscore
          ls -lah data | sed -n '1,200p'

      # Phase IV – Drift Detection
      - name: Drift detector
        run: python src/monitors/drift_detector.py

      # Phase V – Explainability (SHAP)
      - name: SHAP explainability
        run: |
          python src/explain/shap_summary.py \
            --data data/data_prepared_current.csv \
            --out reports/shap_top_features.png \
            --topk 15

      # Phase V – Fairness Audit (optional)
      - name: Fairness audit
        run: python src/eval/fairness_audit.py
        continue-on-error: true

      # Phase V – Trustworthy AI Audit (optional)
      - name: Build trustworthy audit
        run: python src/eval/make_trustworthy_audit.py
        continue-on-error: true

      # Phase VI – Policy gate
      - name: Enforce policy gate
        run: python src/ops/policy_gate.py

      # Always upload the gate JSON as a separate artifact (useful on failure)
      - name: Upload policy gate result
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: policy_gate_result
          path: reports/policy_gate_result.json
          if-no-files-found: warn

      # Build Step 3 dashboard (index.html)
      - name: Build dashboard
        run: python src/reports_dashboard.py

      # Upload all artifacts for audit trail & reviewer access
      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: driftops-reports
          path: |
            reports/**
            reports/index.html
            mlruns/**
            policy.yaml
          if-no-files-found: warn